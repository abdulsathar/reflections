Q. What happens when you initialize a repository? Why do you need to do it?

	
	When we initialize a repository we are starting the process of keeping track of the changges in the  folder we just initialised.We initislize  a repository when we start a new project or when we need to create a history of commits to track the peogress.

	
Q. How is the staging area different from the working directory and the repository? What value do you think it offers?


	Staging area offers the freedom selecting the initial commit to be done by selecting individual files or a group according to our wish.


Q. How can you use the staging area to make sure you have one commit per logical change?


	Using 'git diff' and  'git diff --staged' we can easily identify the changes done to the files before commit. So ini a sense Staging area creates a platform to identify the changes and make commit accordingly. thus we can achieve one commit per logic.

Q.  What are some situations when branches would be helpful in keeping your history organized? How would branches help?


	Branches help us in organising different variations that we commit to the code whether to experiment a new feature or to try out different codes. We can easily track these from the history in the repository. 
	Master branch can be used where we present it publicly and the development. This branch will always work without any problem.


Q. How do the diagrams help you visualize the branch structure?


	Diagrams visualize where the commits branch out from the master branch. It can help us understand where the brach deviated away from the  master and how many commits on the master branch have been further committed.

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?


	Merging two branches results in a branch that consists of codes from both branches.in a sense it derivves from both branches. Since we make a branch from two different branches it has two parents. Hence we point towards the two commits of different branches as the parent in the diagram.

Q. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?


	Pros:
		- Less time consuming.
		- Easier to find out the difference in codes.
		- Faster conflict resolution.
		- Doesn't need manual proof reading of codes.

	Cons:
		- It just shows the differences.
		- Doesn't do logical reasoning.
		- Might end up removing important snippets of code.


Q. 